#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <cstring>
#include <string>
#include <cstdlib>

using namespace std;

int map[101][101];
bool visit[101][101];
int M, N, K;
int result[10001];
int numbers;
int totalcnt;

void DFS(int y, int x, int idx) {
	visit[y][x] = true;
	totalcnt += 1;
	if ((y > 0) && !visit[y - 1][x] && !map[y - 1][x]) {
		DFS(y - 1, x, idx);
	}
	if ((y < M - 1) && !visit[y + 1][x] && !map[y + 1][x]) {
		DFS(y + 1, x, idx);
	}
	if ((x > 0) && !visit[y][x - 1] && !map[y][x - 1]) {
		DFS(y, x - 1, idx);
	}
	if ((x < N - 1) && !visit[y][x + 1] && !map[y][x + 1]) {
		DFS(y, x + 1, idx);
	}
	//if (!result[idx]) result[idx] = cnt;
	result[idx] = max(result[idx], totalcnt);
}

int main(void)
{
	int x1, y1, x2, y2;
	cin >> M >> N >> K;
	for (int i = 0; i < K; i++) {
		cin >> x1 >> y1 >> x2 >> y2;
		for (int y = y1; y < y2; y++) {
			for (int x = x1; x < x2; x++) {
				map[y][x] = 1;
			}
		}
	}
	
	for (int i = 0; i < M; i++)
	{
		for (int j = 0; j < N; j++) {
			if (!map[i][j] && !visit[i][j]) {
				DFS(i, j, numbers);
				numbers += 1;
				totalcnt = 0;
			}
		}
	}

	sort(result, result + numbers);
	cout << numbers << endl;
	for (int i = 0; i < numbers; i++) {
		cout << result[i] << endl;
	}
	return 0;
}

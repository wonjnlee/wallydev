#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <list>
#include <cmath>
using namespace std;

int M, N, K;
int map[51][51];
int visit[51][51];
vector <int> result;

void DFS(int y, int x) {
    visit[y][x] = 1;
    if((y > 0) && map[y - 1][x] && !visit[y - 1][x]) {
        DFS(y - 1, x);
    }
    if((y < N - 1) && map[y + 1][x] && !visit[y + 1][x]) {
        DFS(y + 1, x);
    }
    if((x > 0) && map[y][x - 1] && !visit[y][x - 1]) {
        DFS(y, x - 1);
    }
    if((x < M - 1) && map[y][x + 1] && !visit[y][x + 1]) {
        DFS(y, x + 1);
    }
}

int main(void)
{
    int testcase;
    int x, y;
    int cnt = 0;
    cin>>testcase;
    for(int i=0; i<testcase; i++) {
        cin>>M>>N>>K;
        for(int j=0; j<K; j++) {
            cin>>x>>y;
            map[y][x] = 1;
        }
        for(int k=0; k<N; k++) {
            for(int l=0; l<M; l++) {
                if(!visit[k][l] && map[k][l]) {
                    DFS(k, l);
                    cnt++;
                }
            }
        }
        result.push_back(cnt);
        cnt = 0;
        for(int k=0; k<51; k++) {
            for(int l=0; l<51; l++) {
                map[k][l] = 0;
                visit[k][l] = 0;
            }
        }
    }
    for(int i = 0; i<result.size(); i++) cout<<result[i]<<endl;
    return 0;
}

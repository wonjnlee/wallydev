#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <cstring>
#include <list>
#include <cmath>
using namespace std;

int R, C;
char map[21][21];
bool visit[21][21];
bool alphabet[26];
int maximumcount;

void DFS(int r, int c, int result) {
    maximumcount = max(maximumcount, result);
    int cc = 0;
    visit[r][c] = true;
    alphabet[map[r][c] - 'A'] = true;
    cout<<result<<endl;
    if((r > 0) && !visit[r-1][c] && !alphabet[map[r-1][c]-'A'])       {cc+=1; cout<<r<<","<<c<<"->"<<r-1<<","<<c<<" 1 - "<<cc<<endl; DFS(r-1, c, result+1);}
    if((r < R-1) && !visit[r+1][c] && !alphabet[map[r+1][c]-'A'])     {cc+=1; cout<<r<<","<<c<<"->"<<r+1<<","<<c<<" 2 - "<<cc<<endl; DFS(r+1, c, result+1);}
    if((c > 0) && !visit[r][c-1] && !alphabet[map[r][c-1]-'A'])       {cc+=1; cout<<r<<","<<c<<"->"<<r<<","<<c-1<<" 3 - "<<cc<<endl; DFS(r, c-1, result+1);}
    if((c < C-1) && !visit[r][c+1] && !alphabet[map[r][c+1]-'A'])     {cc+=1; cout<<r<<","<<c<<"->"<<r<<","<<c+1<<" 4 - "<<cc<<endl; DFS(r, c+1, result+1);}
    cout<<r<<" "<<c<<" 11"<<" ";
    visit[r][c] = false;
    alphabet[map[r][c]-'A'] = false;
    cout<<"22"<<endl;
}

int main(void)
{
    string str;
    cin>>R>>C;
    for(int i=0; i<R; i++) {
        cin>>str;
        for(int j=0; j<C; j++) {
            map[i][j] = str[j];
        }
    }
    DFS(0,0,1);
    cout<<maximumcount<<endl;
    return 0;
}

used case
2 4
CAAB
ADCB

result
1
0,0->1,0 2 - 1
2
1,0->1,1 4 - 1
3
1 1 11 22
1 0 11 22
0,0->0,1 4 - 2
2
0,1->1,1 2 - 1
3
1 1 11 22
0 1 11 22
0 0 11 22
3
Program ended with exit code: 0
